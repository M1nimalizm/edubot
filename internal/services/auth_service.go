package services

import (
	"fmt"
	"time"

	"edubot/internal/models"
	"edubot/internal/repository"
	"edubot/pkg/telegram"

	"github.com/golang-jwt/jwt/v5"
	"github.com/google/uuid"
)

// AuthService –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–µ—Ä–≤–∏—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
type AuthService struct {
	userRepo           repository.UserRepository
	trialRepo          *repository.TrialRequestRepository
	telegramBot        *telegram.Bot
	jwtSecret          string
	teacherTelegramID  int64
	teacherTelegramIDs map[int64]struct{}
	teacherPassword    string
}

// NewAuthService —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
func NewAuthService(
	userRepo repository.UserRepository,
	trialRepo *repository.TrialRequestRepository,
	telegramBot *telegram.Bot,
	jwtSecret string,
	teacherTelegramID int64,
	teacherTelegramIDs []int64,
	teacherPassword string,
) *AuthService {
	idSet := make(map[int64]struct{})
	for _, id := range teacherTelegramIDs {
		idSet[id] = struct{}{}
	}
	return &AuthService{
		userRepo:           userRepo,
		trialRepo:          trialRepo,
		telegramBot:        telegramBot,
		jwtSecret:          jwtSecret,
		teacherTelegramID:  teacherTelegramID,
		teacherTelegramIDs: idSet,
		teacherPassword:    teacherPassword,
	}
}

// TelegramAuthData –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ Telegram
type TelegramAuthData struct {
	ID        int64  `json:"id"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Username  string `json:"username"`
	PhotoURL  string `json:"photo_url"`
	AuthDate  int64  `json:"auth_date"`
	Hash      string `json:"hash"`
}

// AuthResult –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
type AuthResult struct {
	User           *models.User `json:"user"`
	Token          string       `json:"token"`
	IsNewUser      bool         `json:"is_new_user"`
	Role           string       `json:"role"`
	AllowedTeacher bool         `json:"allowed_teacher"`
}

// AuthenticateWithTelegram –∞–≤—Ç–æ—Ä–∏–∑—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Telegram
func (s *AuthService) AuthenticateWithTelegram(authData *TelegramAuthData) (*AuthResult, error) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏)
	// if !s.validateTelegramAuth(authData) {
	//     return nil, fmt.Errorf("invalid telegram auth data")
	// }

	// –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user, err := s.userRepo.GetByTelegramID(authData.ID)
	isNewUser := false

	if err != nil {
		// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
		user = &models.User{
			TelegramID: authData.ID,
			FirstName:  authData.FirstName,
			LastName:   authData.LastName,
			Username:   authData.Username,
			Role:       models.RoleGuest, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≥–æ—Å—Ç—å
			InviteCode: nil,              // –ü—É—Å—Ç–æ–π invite code
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º
		if _, ok := s.teacherTelegramIDs[authData.ID]; ok || authData.ID == s.teacherTelegramID {
			user.Role = models.RoleTeacher
		}

		if err := s.userRepo.Create(user); err != nil {
			// –ï—Å–ª–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —É–∂–µ —Å–æ–∑–¥–∞–ª–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî —á–∏—Ç–∞–µ–º –µ–≥–æ –∏ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –æ–Ω –Ω–µ –Ω–æ–≤—ã–π
			existing, gerr := s.userRepo.GetByTelegramID(authData.ID)
			if gerr != nil {
				return nil, fmt.Errorf("failed to create user: %w", err)
			}
			user = existing
			isNewUser = false
		} else {
			isNewUser = true
		}
	} else {
		// –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		user.FirstName = authData.FirstName
		user.LastName = authData.LastName
		user.Username = authData.Username
		if err := s.userRepo.Update(user); err != nil {
			return nil, fmt.Errorf("failed to update user: %w", err)
		}
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
	token, err := s.generateJWT(user)
	if err != nil {
		return nil, fmt.Errorf("failed to generate token: %w", err)
	}

	return &AuthResult{
		User:           user,
		Token:          token,
		IsNewUser:      isNewUser,
		Role:           string(user.Role),
		AllowedTeacher: s.IsTeacherTelegram(user.TelegramID),
	}, nil
}

// RegisterStudent —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —É—á–µ–Ω–∏–∫–∞ –ø–æ –∫–æ–¥—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
func (s *AuthService) RegisterStudent(telegramID int64, inviteCode string, phone string, grade int, subjects string) error {
	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user, err := s.userRepo.GetByTelegramID(telegramID)
	if err != nil {
		return fmt.Errorf("user not found: %w", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–æ–¥–∞)
	if inviteCode == "" {
		return fmt.Errorf("invite code is required")
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user.Role = models.RoleStudent
	user.Phone = phone
	user.Grade = grade
	user.Subjects = subjects
	user.InviteCode = &inviteCode

	if err := s.userRepo.Update(user); err != nil {
		return fmt.Errorf("failed to register student: %w", err)
	}

	return nil
}

// SubmitTrialRequest —Å–æ–∑–¥–∞–µ—Ç –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ
func (s *AuthService) SubmitTrialRequest(request *models.TrialRequest) error {
	// –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
	if err := s.trialRepo.Create(request); err != nil {
		return fmt.Errorf("failed to create trial request: %w", err)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é
	requestData := map[string]interface{}{
		"name":          request.Name,
		"grade":         request.Grade,
		"subject":       request.Subject,
		"level":         request.Level,
		"contact_type":  request.ContactType,
		"contact_value": request.ContactValue,
		"comment":       request.Comment,
		"created_at":    request.CreatedAt.Format("02.01.2006 15:04"),
	}

	fmt.Printf("Sending trial request notification to teacher ID: %d\n", s.teacherTelegramID)
	if err := s.telegramBot.SendTrialRequestNotification(s.teacherTelegramID, requestData); err != nil {
		// –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
		fmt.Printf("Failed to send notification: %v\n", err)
	} else {
		fmt.Printf("Trial request notification sent successfully\n")
	}

	return nil
}

// GenerateInviteCode –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
func (s *AuthService) GenerateInviteCode() (string, error) {
	return s.userRepo.GenerateInviteCode()
}

// ValidateToken –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç JWT —Ç–æ–∫–µ–Ω
func (s *AuthService) ValidateToken(tokenString string) (*models.User, error) {
	token, err := jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) {
		if _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok {
			return nil, fmt.Errorf("unexpected signing method: %v", token.Header["alg"])
		}
		return []byte(s.jwtSecret), nil
	})

	if err != nil {
		return nil, fmt.Errorf("invalid token: %w", err)
	}

	if claims, ok := token.Claims.(jwt.MapClaims); ok && token.Valid {
		userIDStr, ok := claims["user_id"].(string)
		if !ok {
			return nil, fmt.Errorf("invalid token claims")
		}

		userID, err := uuid.Parse(userIDStr)
		if err != nil {
			return nil, fmt.Errorf("invalid user ID in token: %w", err)
		}

		user, err := s.userRepo.GetByID(userID)
		if err != nil {
			return nil, fmt.Errorf("user not found: %w", err)
		}

		return user, nil
	}

	return nil, fmt.Errorf("invalid token")
}

// generateJWT –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç JWT —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (s *AuthService) generateJWT(user *models.User) (string, error) {
	claims := jwt.MapClaims{
		"user_id":     user.ID.String(),
		"telegram_id": user.TelegramID,
		"role":        user.Role,
		"exp":         time.Now().Add(24 * time.Hour).Unix(),
		"iat":         time.Now().Unix(),
	}

	token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)
	return token.SignedString([]byte(s.jwtSecret))
}

// Public helpers for handlers
func (s *AuthService) IsTeacherTelegram(telegramID int64) bool {
	if telegramID == s.teacherTelegramID {
		return true
	}
	_, ok := s.teacherTelegramIDs[telegramID]
	return ok
}

func (s *AuthService) ValidateTeacherPassword(password string) bool {
	if s.teacherPassword == "" {
		return false
	}
	return password == s.teacherPassword
}

func (s *AuthService) UpdateUser(user *models.User) error {
	return s.userRepo.Update(user)
}

func (s *AuthService) GenerateToken(user *models.User) (string, error) {
	return s.generateJWT(user)
}

// AssignStudentParams –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞ –±–µ–∑ —É—á–∞—Å—Ç–∏—è —É—á–µ–Ω–∏–∫–∞
type AssignStudentParams struct {
	UserID     *uuid.UUID
	TelegramID *int64
	Username   string
	Grade      *int
	Subjects   string
}

// AssignStudentToTeacher –∞–ø–≥—Ä–µ–π–¥–∏—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ student (teacher-driven)
func (s *AuthService) AssignStudentToTeacher(teacherID uuid.UUID, params AssignStudentParams) (*models.User, error) {
	var user *models.User
	var err error
	if params.UserID != nil {
		user, err = s.userRepo.GetByID(*params.UserID)
	} else if params.TelegramID != nil && *params.TelegramID != 0 {
		user, err = s.userRepo.GetByTelegramID(*params.TelegramID)
	} else if params.Username != "" {
		user, err = s.userRepo.GetByUsername(params.Username)
	} else {
		return nil, fmt.Errorf("no identifier provided")
	}
	if err != nil {
		return nil, err
	}

	// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –∏ —É—á–µ–±–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤
	user.Role = models.RoleStudent
	if params.Grade != nil {
		user.Grade = *params.Grade
	}
	if params.Subjects != "" {
		user.Subjects = params.Subjects
	}
	if err := s.userRepo.Update(user); err != nil {
		return nil, err
	}

	// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫—É
	if s.telegramBot != nil && user.TelegramID != 0 {
		s.telegramBot.SendMessage(user.TelegramID, "üéì –í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã —É—á–µ–Ω–∏–∫–æ–º. –û—Ç–∫—Ä–æ–π—Ç–µ –º–∏–Ω–∏‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞–Ω–∏–π.")
	}
	return user, nil
}

// SelectRole –º–µ–Ω—è–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
func (s *AuthService) SelectRole(user *models.User, role models.UserRole) (string, error) {
	if role == models.RoleTeacher {
		if !s.IsTeacherTelegram(user.TelegramID) {
			return "", fmt.Errorf("not allowed to be teacher")
		}
	}
	user.Role = role
	if err := s.userRepo.Update(user); err != nil {
		return "", err
	}
	return s.generateJWT(user)
}

// GetTrialRequests –ø–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–æ–±–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è
func (s *AuthService) GetTrialRequests() ([]models.TrialRequest, error) {
	return s.trialRepo.GetAll()
}

// GetStats –ø–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
func (s *AuthService) GetStats() (map[string]interface{}, error) {
	// –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–µ–Ω–∏–∫–æ–≤
	students, err := s.userRepo.ListByRole(models.RoleStudent)
	if err != nil {
		return nil, err
	}

	// –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫
	requests, err := s.trialRepo.GetAll()
	if err != nil {
		return nil, err
	}

	// –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ (—Å—Ç–∞—Ç—É—Å pending)
	pendingCount := 0
	for _, req := range requests {
		if req.Status == "pending" {
			pendingCount++
		}
	}

	return map[string]interface{}{
		"total_students":    len(students),
		"pending_requests":  pendingCount,
		"total_requests":    len(requests),
		"total_assignments": 0, // TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–æ–≥–¥–∞ –±—É–¥—É—Ç –∑–∞–¥–∞–Ω–∏—è
		"total_content":     0, // TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç
	}, nil
}

// GetStudents –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤
func (s *AuthService) GetStudents() ([]models.User, error) {
	return s.userRepo.ListByRole("student")
}

// LinkExistingStudentByUsername –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Ä–æ–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
func (s *AuthService) LinkExistingStudentByUsername(username string) (*models.User, error) {
	if username == "" {
		return nil, fmt.Errorf("username is required")
	}
	user, err := s.userRepo.GetByUsername(username)
	if err != nil {
		return nil, fmt.Errorf("user not found")
	}
	user.Role = models.RoleStudent
	if err := s.userRepo.Update(user); err != nil {
		return nil, fmt.Errorf("failed to update user: %w", err)
	}
	return user, nil
}

// RegisterStudentByCode —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —É—á–µ–Ω–∏–∫–∞ —Ç–æ–ª—å–∫–æ –ø–æ –∫–æ–¥—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
func (s *AuthService) RegisterStudentByCode(inviteCode string) (*models.User, string, error) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
	if inviteCode == "" {
		return nil, "", fmt.Errorf("invite code is required")
	}
	// –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —É—á–µ–Ω–∏–∫–∞ —Å —ç—Ç–∏–º –∫–æ–¥–æ–º (—É—á–∏—Ç–µ–ª—å —Å–æ–∑–¥–∞—ë—Ç –∑–∞—Ä–∞–Ω–µ–µ)
	if existing, err := s.userRepo.GetByInviteCode(inviteCode); err == nil && existing != nil {
		// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —É—á–µ–Ω–∏–∫–∞
		token, err := s.generateJWT(existing)
		if err != nil {
			return nil, "", fmt.Errorf("failed to generate token: %w", err)
		}
		return existing, token, nil
	}

	// –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî —Å–æ–∑–¥–∞—ë–º —É—á–µ–Ω–∏–∫–∞ (fallback)
	user := &models.User{
		ID:         uuid.New(),
		TelegramID: 0,
		Role:       models.RoleStudent,
		InviteCode: &inviteCode,
		CreatedAt:  time.Now(),
		UpdatedAt:  time.Now(),
	}

	if err := s.userRepo.Create(user); err != nil {
		return nil, "", fmt.Errorf("failed to create user: %w", err)
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
	token, err := s.generateJWT(user)
	if err != nil {
		return nil, "", fmt.Errorf("failed to generate token: %w", err)
	}

	return user, token, nil
}

// CreateStudentByTeacher —Å–æ–∑–¥–∞–µ—Ç —É—á–µ–Ω–∏–∫–∞ –æ—Ç –∏–º–µ–Ω–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏ –≤—ã–¥–∞–µ—Ç –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
func (s *AuthService) CreateStudentByTeacher(firstName string, lastName string, grade int, subjects string, phone string, username string, telegramID int64) (*models.User, string, error) {
	// –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–≤–∞–π—Ç-–∫–æ–¥
	code, err := s.userRepo.GenerateInviteCode()
	if err != nil {
		return nil, "", fmt.Errorf("failed to generate invite code: %w", err)
	}

	// –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user := &models.User{
		ID:         uuid.New(),
		TelegramID: telegramID, // –º–æ–∂–µ—Ç –±—ã—Ç—å 0, –µ—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω
		Username:   username,
		FirstName:  firstName,
		LastName:   lastName,
		Role:       models.RoleStudent,
		Phone:      phone,
		Grade:      grade,
		Subjects:   subjects,
		InviteCode: &code,
		CreatedAt:  time.Now(),
		UpdatedAt:  time.Now(),
	}

	if err := s.userRepo.Create(user); err != nil {
		return nil, "", fmt.Errorf("failed to create student: %w", err)
	}

	return user, code, nil
}

// validateTelegramAuth –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
func (s *AuthService) validateTelegramAuth(authData *TelegramAuthData) bool {
	// –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
	// —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –±–æ—Ç–∞
	return true
}

// ApproveTrialRequest –æ–¥–æ–±—Ä—è–µ—Ç –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫
func (s *AuthService) ApproveTrialRequest(requestID string) error {
	id, err := uuid.Parse(requestID)
	if err != nil {
		return fmt.Errorf("invalid request ID: %w", err)
	}
	
	request, err := s.trialRepo.GetByID(id)
	if err != nil {
		return fmt.Errorf("failed to get trial request: %w", err)
	}

	request.Status = "approved"
	if err := s.trialRepo.Update(request); err != nil {
		return fmt.Errorf("failed to update trial request: %w", err)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∏—Ç–µ–ª—é (–µ—Å–ª–∏ –µ—Å—Ç—å telegram_id)
	if request.TelegramID != 0 && s.telegramBot != nil {
		message := fmt.Sprintf("üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫ –æ–¥–æ–±—Ä–µ–Ω–∞!\n\n–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è.")
		s.telegramBot.SendMessage(request.TelegramID, message)
	}

	return nil
}

// RejectTrialRequest –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫
func (s *AuthService) RejectTrialRequest(requestID string) error {
	id, err := uuid.Parse(requestID)
	if err != nil {
		return fmt.Errorf("invalid request ID: %w", err)
	}
	
	request, err := s.trialRepo.GetByID(id)
	if err != nil {
		return fmt.Errorf("failed to get trial request: %w", err)
	}

	request.Status = "rejected"
	if err := s.trialRepo.Update(request); err != nil {
		return fmt.Errorf("failed to update trial request: %w", err)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∏—Ç–µ–ª—é (–µ—Å–ª–∏ –µ—Å—Ç—å telegram_id)
	if request.TelegramID != 0 && s.telegramBot != nil {
		message := fmt.Sprintf("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n\n–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º.")
		s.telegramBot.SendMessage(request.TelegramID, message)
	}

	return nil
}

// SearchUsers –∏—â–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É (—Ç–æ–ª—å–∫–æ –≥–æ—Å—Ç–∏)
func (s *AuthService) SearchUsers(query string) ([]models.User, error) {
	// –ò—â–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é "guest"
	users, err := s.userRepo.SearchByQuery(query, "guest")
	if err != nil {
		return nil, fmt.Errorf("failed to search users: %w", err)
	}
	
	return users, nil
}
