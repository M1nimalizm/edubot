package telegram

import (
	"fmt"
	"log"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// Bot –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç Telegram –±–æ—Ç–∞
type Bot struct {
	api           *tgbotapi.BotAPI
	token         string
	webhook       string
	assignStudent func(teacherTelegramID int64, telegramID *int64, username string, grade *int, subjects string) error
	getUserRole   func(telegramID int64) string
	listGroups    func(teacherTelegramID int64) ([]struct {
		ID   string
		Name string
	}, error)
}

// NewBot —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
func NewBot(token, webhook string) (*Bot, error) {
	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, fmt.Errorf("failed to create bot: %w", err)
	}

	bot.Debug = false // –í–∫–ª—é—á–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

	return &Bot{
		api:     bot,
		token:   token,
		webhook: webhook,
	}, nil
}

// SetAssignStudent callback to backend
func (b *Bot) SetAssignStudent(cb func(teacherTelegramID int64, telegramID *int64, username string, grade *int, subjects string) error) {
	b.assignStudent = cb
}

// SetGetUserRole callback
func (b *Bot) SetGetUserRole(cb func(telegramID int64) string) { b.getUserRole = cb }

// SetListTeacherGroups callback
func (b *Bot) SetListTeacherGroups(cb func(teacherTelegramID int64) ([]struct {
	ID   string
	Name string
}, error)) {
	b.listGroups = cb
}

// SetWebhook —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç webhook –¥–ª—è –±–æ—Ç–∞
func (b *Bot) SetWebhook() error {
	webhookConfig, err := tgbotapi.NewWebhook(b.webhook)
	if err != nil {
		return fmt.Errorf("failed to create webhook config: %w", err)
	}
	_, err = b.api.Request(webhookConfig)
	if err != nil {
		return fmt.Errorf("failed to set webhook: %w", err)
	}
	return nil
}

// SetCommands —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
func (b *Bot) SetCommands() error {
	commands := []tgbotapi.BotCommand{
		{
			Command:     "start",
			Description: "üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º",
		},
		{
			Command:     "help",
			Description: "‚ÑπÔ∏è –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é",
		},
		{
			Command:     "app",
			Description: "üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ EduBot",
		},
		{
			Command:     "info",
			Description: "üë®‚Äçüè´ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ",
		},
	}

	setCommands := tgbotapi.NewSetMyCommands(commands...)
	_, err := b.api.Request(setCommands)
	if err != nil {
		return fmt.Errorf("failed to set commands: %w", err)
	}
	return nil
}

// SendWelcomeToNewUser –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
func (b *Bot) SendWelcomeToNewUser(chatID int64, firstName string) error {
	text := fmt.Sprintf(`üëã –ü—Ä–∏–≤–µ—Ç, %s! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ EduBot!

üéì –ú–µ–Ω—è –∑–æ–≤—É—Ç –°–∞—à–∞, —è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Ñ–∏–∑–∏–∫–∏ –∏ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ —Å 5-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –ï–ì–≠.

üìö –í –º–æ–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —Ç—ã –º–æ–∂–µ—à—å:
‚Ä¢ –£–∑–Ω–∞—Ç—å –æ–±–æ –º–Ω–µ –∏ –º–æ–∏—Ö –º–µ—Ç–æ–¥–∞—Ö –æ–±—É—á–µ–Ω–∏—è
‚Ä¢ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ
‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å

üöÄ –ù–∞—á–Ω–µ–º –ø—É—Ç—å –∫ —É—Å–ø–µ—à–Ω–æ–π —Å–¥–∞—á–µ –ï–ì–≠ –≤–º–µ—Å—Ç–µ!

üí° <b>–ë—ã—Å—Ç—Ä–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è:</b>
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏
‚Ä¢ –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ`, firstName)

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "HTML"

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonURL("üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "https://edubot-0g05.onrender.com"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ÑπÔ∏è –ü–æ–º–æ—â—å", "help"),
		),
	)
	msg.ReplyMarkup = keyboard

	_, err := b.api.Send(msg)
	if err != nil {
		return fmt.Errorf("failed to send welcome message: %w", err)
	}
	return nil
}

// SendMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
func (b *Bot) SendMessage(chatID int64, text string) error {
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "HTML"

	_, err := b.api.Send(msg)
	if err != nil {
		return fmt.Errorf("failed to send message: %w", err)
	}
	return nil
}

// SendNotification –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
func (b *Bot) SendTrialRequestNotification(teacherID int64, requestData map[string]interface{}) error {
	contactType := requestData["contact_type"].(string)
	contactValue := requestData["contact_value"].(string)

	var contactIcon, contactLabel string
	if contactType == "phone" {
		contactIcon = "üì±"
		contactLabel = "–¢–µ–ª–µ—Ñ–æ–Ω"
	} else {
		contactIcon = "üì≤"
		contactLabel = "Telegram"
	}

	text := fmt.Sprintf(`
üéì <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ!</b>

üë§ <b>–ò–º—è:</b> %s
üìö <b>–ö–ª–∞—Å—Å:</b> %d
üìñ <b>–ü—Ä–µ–¥–º–µ—Ç:</b> %s
‚≠ê <b>–£—Ä–æ–≤–µ–Ω—å:</b> %d/5
%s <b>%s:</b> %s

üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b>
%s

üïê <b>–í—Ä–µ–º—è –ø–æ–¥–∞—á–∏:</b> %s
	`,
		requestData["name"],
		requestData["grade"],
		requestData["subject"],
		requestData["level"],
		contactIcon,
		contactLabel,
		contactValue,
		requestData["comment"],
		requestData["created_at"],
	)

	return b.SendMessage(teacherID, text)
}

// SendAssignmentNotification –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–¥–∞–Ω–∏–∏
func (b *Bot) SendAssignmentNotification(chatID int64, assignmentTitle, subject string, deadline string) error {
	text := fmt.Sprintf(`
üìù <b>–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ!</b>

üìñ <b>–ü—Ä–µ–¥–º–µ—Ç:</b> %s
üìã <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> %s
‚è∞ <b>–î–µ–¥–ª–∞–π–Ω:</b> %s

–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π!
	`, subject, assignmentTitle, deadline)

	return b.SendMessage(chatID, text)
}

// SendDeadlineReminder –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–µ–º—Å—è –¥–µ–¥–ª–∞–π–Ω–µ
func (b *Bot) SendDeadlineReminder(chatID int64, assignmentTitle string, hoursLeft int) error {
	text := fmt.Sprintf(`
‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–µ–¥–ª–∞–π–Ω–µ!</b>

üìã <b>–ó–∞–¥–∞–Ω–∏–µ:</b> %s
‚è≥ <b>–û—Å—Ç–∞–ª–æ—Å—å:</b> %d —á–∞—Å–æ–≤

–ù–µ –∑–∞–±—É–¥—å—Ç–µ —Å–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –≤–æ–≤—Ä–µ–º—è!
	`, assignmentTitle, hoursLeft)

	return b.SendMessage(chatID, text)
}

// SendGradeNotification –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ
func (b *Bot) SendGradeNotification(chatID int64, assignmentTitle string, grade int, comments string) error {
	text := fmt.Sprintf(`
‚úÖ <b>–†–∞–±–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞!</b>

üìã <b>–ó–∞–¥–∞–Ω–∏–µ:</b> %s
‚≠ê <b>–û—Ü–µ–Ω–∫–∞:</b> %d/5

üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:</b>
%s
	`, assignmentTitle, grade, comments)

	return b.SendMessage(chatID, text)
}

// GetUpdates –ø–æ–ª—É—á–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
func (b *Bot) GetUpdates() (tgbotapi.UpdatesChannel, error) {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := b.api.GetUpdatesChan(u)
	return updates, nil
}

// ProcessUpdate –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
func (b *Bot) ProcessUpdate(update map[string]interface{}) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ callback query (–Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ inline-–∫–Ω–æ–ø–∫—É)
	if callbackQuery, ok := update["callback_query"].(map[string]interface{}); ok {
		b.processCallbackQuery(callbackQuery)
		return
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	message, ok := update["message"].(map[string]interface{})
	if !ok {
		return
	}

	text, _ := message["text"].(string)
	from, _ := message["from"].(map[string]interface{})
	chat, _ := message["chat"].(map[string]interface{})

	userID, _ := from["id"].(float64)
	chatID, _ := chat["id"].(float64)

	log.Printf("Received message: %s from user %d", text, int64(userID))

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
	switch text {
	case "/start":
		role := "guest"
		if b.getUserRole != nil {
			role = b.getUserRole(int64(userID))
		}
		b.sendMainMenu(int64(chatID), role)
	case "/help":
		b.sendHelpMessage(int64(chatID))
	case "/app":
		b.sendAppLink(int64(chatID))
	case "/info":
		b.sendTeacherInfo(int64(chatID))
	default:
		if strings.HasPrefix(text, "/add_student") {
			b.handleAddStudent(int64(userID), text)
			return
		}
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
		if b.hasMediaFiles(message) {
			b.handleMediaMessage(message)
		} else {
			b.SendMessage(int64(chatID), "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")
		}
	}
}

func (b *Bot) handleAddStudent(teacherTelegramID int64, text string) {
	if b.assignStudent == nil {
		b.SendMessage(teacherTelegramID, "–§—É–Ω–∫—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
		return
	}
	parts := strings.Fields(text)
	if len(parts) < 2 {
		b.SendMessage(teacherTelegramID, "–§–æ—Ä–º–∞—Ç: /add_student @username|telegram_id [–∫–ª–∞—Å—Å] [–ø—Ä–µ–¥–º–µ—Ç—ã]")
		return
	}
	var tgID *int64
	uname := ""
	// –ø–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å ID
	if id, err := strconv.ParseInt(parts[1], 10, 64); err == nil {
		tgID = &id
	} else {
		uname = strings.TrimPrefix(parts[1], "@")
	}
	var grade *int
	if len(parts) >= 3 {
		if g, err := strconv.Atoi(parts[2]); err == nil {
			grade = &g
		}
	}
	subjects := ""
	if len(parts) >= 4 {
		subjects = strings.Join(parts[3:], " ")
	}
	if err := b.assignStudent(teacherTelegramID, tgID, uname, grade, subjects); err != nil {
		b.SendMessage(teacherTelegramID, fmt.Sprintf("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å —É—á–µ–Ω–∏–∫–∞: %v", err))
		return
	}
	b.SendMessage(teacherTelegramID, "‚úÖ –£—á–µ–Ω–∏–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω")
}

// sendMainMenu –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ —Ä–æ–ª–∏
func (b *Bot) sendMainMenu(chatID int64, role string) {
	var rows [][]tgbotapi.InlineKeyboardButton
	if role == "teacher" {
		rows = [][]tgbotapi.InlineKeyboardButton{
			{tgbotapi.NewInlineKeyboardButtonURL("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "https://edubot-0g05.onrender.com/teacher-dashboard")},
			{tgbotapi.NewInlineKeyboardButtonURL("üë• –£—á–µ–Ω–∏–∫–∏", "https://edubot-0g05.onrender.com/teacher-students")},
			{tgbotapi.NewInlineKeyboardButtonURL("üë®‚Äçüë©‚Äçüëß –ì—Ä—É–ø–ø—ã (–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏)", "https://edubot-0g05.onrender.com/teacher-groups")},
			{tgbotapi.NewInlineKeyboardButtonData("üìã –ì—Ä—É–ø–ø—ã (–≤ –±–æ—Ç–µ)", "show_groups")},
			{tgbotapi.NewInlineKeyboardButtonURL("üìù –ó–∞–¥–∞—Ç—å –î–ó", "https://edubot-0g05.onrender.com/teacher-assignments")},
			{tgbotapi.NewInlineKeyboardButtonURL("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –î–ó", "https://edubot-0g05.onrender.com/teacher-submissions")},
			{tgbotapi.NewInlineKeyboardButtonURL("üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã", "https://edubot-0g05.onrender.com/teacher-content")},
		}
	} else if role == "student" {
		rows = [][]tgbotapi.InlineKeyboardButton{
			{tgbotapi.NewInlineKeyboardButtonURL("üìã –ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è", "https://edubot-0g05.onrender.com/student-dashboard")},
			{tgbotapi.NewInlineKeyboardButtonURL("üì§ –°–¥–∞—Ç—å –î–ó", "https://edubot-0g05.onrender.com/student-dashboard")},
			{tgbotapi.NewInlineKeyboardButtonURL("‚ùì –ü–æ–º–æ—â—å", "https://edubot-0g05.onrender.com")},
		}
	} else {
		rows = [][]tgbotapi.InlineKeyboardButton{
			{tgbotapi.NewInlineKeyboardButtonURL("üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "https://edubot-0g05.onrender.com")},
			{tgbotapi.NewInlineKeyboardButtonData("‚ÑπÔ∏è –ü–æ–º–æ—â—å", "help")},
		}
	}
	kb := tgbotapi.NewInlineKeyboardMarkup(rows...)
	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
	msg.ReplyMarkup = kb
	_, _ = b.api.Send(msg)
}

// processCallbackQuery –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
func (b *Bot) processCallbackQuery(cb map[string]interface{}) {
	data, _ := cb["data"].(string)
	from, _ := cb["from"].(map[string]interface{})
	userID, _ := from["id"].(float64)
	message, _ := cb["message"].(map[string]interface{})
	chat, _ := message["chat"].(map[string]interface{})
	chatID, _ := chat["id"].(float64)

	switch data {
	case "help":
		b.sendHelpMessage(int64(chatID))
	case "show_groups":
		b.renderGroupsList(int64(chatID), int64(userID))
	default:
		// no-op
	}
}

func (b *Bot) renderGroupsList(chatID, teacherTelegramID int64) {
	if b.listGroups == nil {
		b.SendMessage(chatID, "–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
		return
	}
	groups, err := b.listGroups(teacherTelegramID)
	if err != nil || len(groups) == 0 {
		b.SendMessage(chatID, "–ì—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–π—Ç–µ –∏—Ö –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.")
		return
	}
	// –†–∏—Å—É–µ–º –¥–æ 10 –∫–Ω–æ–ø–æ–∫; –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –±–µ–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
	var rows [][]tgbotapi.InlineKeyboardButton
	for i, g := range groups {
		if i >= 10 {
			break
		}
		// –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –≥—Ä—É–ø–ø—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
		rows = append(rows, []tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonURL("üë• "+g.Name, "https://edubot-0g05.onrender.com/teacher-groups"),
		})
	}
	rows = append(rows, []tgbotapi.InlineKeyboardButton{tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "/start")})
	kb := tgbotapi.NewInlineKeyboardMarkup(rows...)
	msg := tgbotapi.NewMessage(chatID, "–í–∞—à–∏ –≥—Ä—É–ø–ø—ã:")
	msg.ReplyMarkup = kb
	_, _ = b.api.Send(msg)
}

// hasMediaFiles –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã
func (b *Bot) hasMediaFiles(message map[string]interface{}) bool {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
	_, hasPhoto := message["photo"]
	_, hasVideo := message["video"]
	_, hasAudio := message["audio"]
	_, hasDocument := message["document"]
	_, hasVoice := message["voice"]

	return hasPhoto || hasVideo || hasAudio || hasDocument || hasVoice
}

// handleMediaMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º–∏
func (b *Bot) handleMediaMessage(message map[string]interface{}) {
	from, _ := message["from"].(map[string]interface{})
	chat, _ := message["chat"].(map[string]interface{})

	userID, _ := from["id"].(float64)
	chatID, _ := chat["id"].(float64)

	log.Printf("Received media message from user %d", int64(userID))

	// –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å MediaService
	// –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
	b.SendMessage(int64(chatID), "üìé –ú–µ–¥–∏–∞—Ñ–∞–π–ª –ø–æ–ª—É—á–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–ø—Ä–∞–≤–∫—É.")
}

// duplicate callback handler removed (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –≤—ã—à–µ)

// sendWelcomeMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
func (b *Bot) sendWelcomeMessage(chatID int64) error {
	text := `üëã –ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –°–∞—à–∞.

üéì –Ø –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Ñ–∏–∑–∏–∫–∏ –∏ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ —Å 5-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –ï–ì–≠.

üìö –ß—Ç–æ–±—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –ø–æ–±–ª–∏–∂–µ, –º–æ–∂–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ —É–∑–Ω–∞—Ç—å –æ–±–æ –º–Ω–µ, –º–æ–∏—Ö –º–µ—Ç–æ–¥–∞—Ö –æ–±—É—á–µ–Ω–∏—è –∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ.

üöÄ –ù–∞—á–Ω–µ–º –ø—É—Ç—å –∫ —É—Å–ø–µ—à–Ω–æ–π —Å–¥–∞—á–µ –ï–ì–≠ –≤–º–µ—Å—Ç–µ!

üí° <b>–ë—ã—Å—Ç—Ä–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è:</b>
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏
‚Ä¢ –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ`

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "HTML"

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonURL("üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "https://edubot-0g05.onrender.com"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ÑπÔ∏è –ü–æ–º–æ—â—å", "help"),
		),
	)
	msg.ReplyMarkup = keyboard

	_, err := b.api.Send(msg)
	if err != nil {
		return fmt.Errorf("failed to send welcome message: %w", err)
	}
	return nil
}

// sendHelpMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é
func (b *Bot) sendHelpMessage(chatID int64) error {
	text := `‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é EduBot</b>

üéØ <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ üìù –ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–æ–±–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è
‚Ä¢ üìö –ü—Ä–æ—Å–º–æ—Ç—Ä –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
‚Ä¢ üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –∏ –∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
‚Ä¢ üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è

üöÄ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
‚Ä¢ /help - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å
‚Ä¢ /app - –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
‚Ä¢ /info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ

üì± <b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å:</b>
1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ
3. –î–æ–∂–¥–∏—Ç–µ—Å—å —Å–≤—è–∑–∏ –æ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è

‚ùì <b>–í–æ–ø—Ä–æ—Å—ã?</b>
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start`

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "HTML"

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonURL("üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "https://edubot-0g05.onrender.com"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üë®‚Äçüè´ –û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ", "info"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–∞—è", "start"),
		),
	)
	msg.ReplyMarkup = keyboard

	_, err := b.api.Send(msg)
	if err != nil {
		return fmt.Errorf("failed to send help message: %w", err)
	}
	return nil
}

// sendAppLink –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
func (b *Bot) sendAppLink(chatID int64) error {
	text := `üì± <b>–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ EduBot</b>

üöÄ –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è:
‚Ä¢ –ó–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!`

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "HTML"

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonURL("üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "https://edubot-0g05.onrender.com"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–∞—è", "start"),
		),
	)
	msg.ReplyMarkup = keyboard

	_, err := b.api.Send(msg)
	if err != nil {
		return fmt.Errorf("failed to send app link: %w", err)
	}
	return nil
}

// sendTeacherInfo –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ
func (b *Bot) sendTeacherInfo(chatID int64) error {
	text := `üë®‚Äçüè´ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ</b>

üéì <b>–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü—É–≥–∞—á–µ–≤</b>
‚Ä¢ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Ñ–∏–∑–∏–∫–∏ –∏ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏
‚Ä¢ 5 –ª–µ—Ç –æ–ø—ã—Ç–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –ï–ì–≠
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª —É—á–µ–Ω–∏–∫–æ–≤: 85+

üìö <b>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:</b>
‚Ä¢ –§–∏–∑–∏–∫–∞ (–ï–ì–≠)
‚Ä¢ –ü—Ä–æ—Ñ–∏–ª—å–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (–ï–ì–≠)
‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–ª–∏–º–ø–∏–∞–¥–∞–º

üèÜ <b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>
‚Ä¢ –ë–æ–ª–µ–µ 100 —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ï–ì–≠: 85+
‚Ä¢ –£—á–µ–Ω–∏–∫–∏ –ø–æ—Å—Ç—É–ø–∞—é—Ç –≤ –≤–µ–¥—É—â–∏–µ –≤—É–∑—ã

üí¨ <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b>
Telegram: @pugach3

üöÄ –•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ? –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!`

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "HTML"

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonURL("üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "https://edubot-0g05.onrender.com"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–∞—è", "start"),
		),
	)
	msg.ReplyMarkup = keyboard

	_, err := b.api.Send(msg)
	if err != nil {
		return fmt.Errorf("failed to send teacher info: %w", err)
	}
	return nil
}

// (—É–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏—Ä—É—é—â–µ–µ—Å—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ SendAssignmentNotification)

// SendAssignmentCompletedNotification –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–º –∑–∞–¥–∞–Ω–∏–∏
func (b *Bot) SendAssignmentCompletedNotification(chatID int64, title, subject, deadline string) error {
	text := fmt.Sprintf(`‚úÖ <b>–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!</b>

üìã <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> %s
üìñ <b>–ü—Ä–µ–¥–º–µ—Ç:</b> %s
‚è∞ <b>–î–µ–¥–ª–∞–π–Ω –±—ã–ª:</b> %s

üë®‚Äçüéì –£—á–µ–Ω–∏–∫ –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏!`, title, subject, deadline)

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "HTML"

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonURL("üìù –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", "https://edubot-0g05.onrender.com"),
		),
	)
	msg.ReplyMarkup = keyboard

	_, err := b.api.Send(msg)
	if err != nil {
		return fmt.Errorf("failed to send assignment completed notification: %w", err)
	}
	return nil
}

// SendCommentNotification –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
func (b *Bot) SendCommentNotification(chatID int64, content, title, subject string) error {
	text := fmt.Sprintf(`üí¨ <b>–ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–¥–∞–Ω–∏—é!</b>

üìã <b>–ó–∞–¥–∞–Ω–∏–µ:</b> %s
üìñ <b>–ü—Ä–µ–¥–º–µ—Ç:</b> %s

üí≠ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b>
%s

üöÄ –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!`, title, subject, content)

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "HTML"

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonURL("üí¨ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "https://edubot-0g05.onrender.com"),
		),
	)
	msg.ReplyMarkup = keyboard

	_, err := b.api.Send(msg)
	if err != nil {
		return fmt.Errorf("failed to send comment notification: %w", err)
	}
	return nil
}

// GetFilePath –ø–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ Telegram
func (b *Bot) GetFilePath(fileID string) (string, error) {
	fileConfig := tgbotapi.FileConfig{FileID: fileID}
	file, err := b.api.GetFile(fileConfig)
	if err != nil {
		return "", fmt.Errorf("failed to get file: %w", err)
	}

	fileURL := fmt.Sprintf("https://api.telegram.org/file/bot%s/%s", b.token, file.FilePath)
	return fileURL, nil
}

// SendMediaUploadInstructions –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–¥–∏–∞
func (b *Bot) SendMediaUploadInstructions(chatID int64, mediaType string) error {
	var text string
	var keyboard tgbotapi.InlineKeyboardMarkup

	switch mediaType {
	case "welcome_video":
		text = `üé¨ <b>–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–æ–ª–∏–∫–∞</b>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ-—Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b>
‚Ä¢ –§–æ—Ä–º–∞—Ç: MP4, MOV, AVI
‚Ä¢ –†–∞–∑–º–µ—Ä: –¥–æ 50 –ú–ë
‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –¥–æ 5 –º–∏–Ω—É—Ç
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ: HD (720p) –∏–ª–∏ –≤—ã—à–µ

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ-—Ñ–∞–π–ª –≤ —ç—Ç–æ—Ç —á–∞—Ç!`

		keyboard = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonURL("üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "https://edubot-0g05.onrender.com"),
			),
		)

	case "homework":
		text = `üìù <b>–°–¥–∞—á–∞ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è</b>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã —Å —Ä–µ—à–µ–Ω–∏–µ–º –∑–∞–¥–∞–Ω–∏—è:
‚Ä¢ –§–æ—Ç–æ —Ä–µ—à–µ–Ω–∏–π
‚Ä¢ –í–∏–¥–µ–æ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º
‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ã (PDF, DOC)
‚Ä¢ –ê—É–¥–∏–æ-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏

<b>–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤!</b>`

		keyboard = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonURL("üìö –ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è", "https://edubot-0g05.onrender.com"),
			),
		)

	case "feedback":
		text = `üéØ <b>–ó–∞–ø–∏—Å—å —Ñ–∏–¥–±—ç–∫–∞ –¥–ª—è —É—á–µ–Ω–∏–∫–∞</b>

–ó–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–º –∑–∞–¥–∞–Ω–∏–∏:
‚Ä¢ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
‚Ä¢ –í–∏–¥–µ–æ —Å —Ä–∞–∑–±–æ—Ä–æ–º –æ—à–∏–±–æ–∫
‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
‚Ä¢ –§–æ—Ç–æ —Å –ø–æ–º–µ—Ç–∫–∞–º–∏

–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —É—á–µ–Ω–∏–∫—É –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª!`

		keyboard = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonURL("üë®‚Äçüè´ –ü–∞–Ω–µ–ª—å —É—á–∏—Ç–µ–ª—è", "https://edubot-0g05.onrender.com"),
			),
		)

	default:
		text = `üìé <b>–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞</b>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —ç—Ç–æ—Ç —á–∞—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.

<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b>
‚Ä¢ –í–∏–¥–µ–æ: MP4, MOV, AVI
‚Ä¢ –ê—É–¥–∏–æ: MP3, WAV, OGG
‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ã: PDF, DOC, DOCX
‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: JPG, PNG, GIF`
	}

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "HTML"
	msg.ReplyMarkup = keyboard

	_, err := b.api.Send(msg)
	if err != nil {
		return fmt.Errorf("failed to send media upload instructions: %w", err)
	}
	return nil
}

// SendMediaUploadSuccess –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
func (b *Bot) SendMediaUploadSuccess(chatID int64, mediaType, fileName string) error {
	var text string

	switch mediaType {
	case "welcome_video":
		text = fmt.Sprintf(`‚úÖ <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–æ–ª–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω!</b>

üìπ <b>–§–∞–π–ª:</b> %s

–†–æ–ª–∏–∫ —Ç–µ–ø–µ—Ä—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.`, fileName)

	case "homework":
		text = fmt.Sprintf(`‚úÖ <b>–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —Å–¥–∞–Ω–æ!</b>

üìé <b>–§–∞–π–ª:</b> %s

–í–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—á–∏—Ç–µ–ª—é –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.`, fileName)

	case "feedback":
		text = fmt.Sprintf(`‚úÖ <b>–§–∏–¥–±—ç–∫ –∑–∞–ø–∏—Å–∞–Ω!</b>

üìé <b>–§–∞–π–ª:</b> %s

–í–∞—à –æ—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—á–µ–Ω–∏–∫—É.`, fileName)

	default:
		text = fmt.Sprintf(`‚úÖ <b>–ú–µ–¥–∏–∞—Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω!</b>

üìé <b>–§–∞–π–ª:</b> %s

–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.`, fileName)
	}

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "HTML"

	_, err := b.api.Send(msg)
	if err != nil {
		return fmt.Errorf("failed to send media upload success: %w", err)
	}
	return nil
}

// SendMediaUploadError –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏
func (b *Bot) SendMediaUploadError(chatID int64, errorMsg string) error {
	text := fmt.Sprintf(`‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞</b>

%s

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.`, errorMsg)

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "HTML"

	_, err := b.api.Send(msg)
	if err != nil {
		return fmt.Errorf("failed to send media upload error: %w", err)
	}
	return nil
}

// HandleMediaUpload –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
func (b *Bot) HandleMediaUpload(update tgbotapi.Update, mediaService interface{}) error {
	var fileName string
	var mediaType string

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
	if update.Message.Photo != nil && len(update.Message.Photo) > 0 {
		// –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
		photo := update.Message.Photo[len(update.Message.Photo)-1] // –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ
		fileName = fmt.Sprintf("image_%d.jpg", photo.FileSize)
		mediaType = "image"
	} else if update.Message.Video != nil {
		// –í–∏–¥–µ–æ
		fileName = update.Message.Video.FileName
		if fileName == "" {
			fileName = fmt.Sprintf("video_%d.mp4", update.Message.Video.FileSize)
		}
		mediaType = "video"
	} else if update.Message.Audio != nil {
		// –ê—É–¥–∏–æ
		fileName = update.Message.Audio.FileName
		if fileName == "" {
			fileName = fmt.Sprintf("audio_%d.mp3", update.Message.Audio.FileSize)
		}
		mediaType = "audio"
	} else if update.Message.Document != nil {
		// –î–æ–∫—É–º–µ–Ω—Ç
		fileName = update.Message.Document.FileName
		mediaType = "document"
	} else if update.Message.Voice != nil {
		// –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		fileName = fmt.Sprintf("voice_%d.ogg", update.Message.Voice.FileSize)
		mediaType = "audio"
	} else {
		return fmt.Errorf("unsupported media type")
	}

	chatID := update.Message.Chat.ID

	// –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å MediaService
	// –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
	err := b.SendMediaUploadSuccess(chatID, mediaType, fileName)
	if err != nil {
		return fmt.Errorf("failed to send success notification: %w", err)
	}

	return nil
}

// HandleWelcomeVideoUpload –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–æ–ª–∏–∫–∞
func (b *Bot) HandleWelcomeVideoUpload(update tgbotapi.Update, mediaService interface{}) error {
	if update.Message.Video == nil {
		return fmt.Errorf("expected video file")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —É—á–∏—Ç–µ–ª–µ–º
	// –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

	return b.HandleMediaUpload(update, mediaService)
}

// HandleHomeworkSubmission –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–¥–∞—á—É –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
func (b *Bot) HandleHomeworkSubmission(update tgbotapi.Update, mediaService interface{}) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —É—á–µ–Ω–∏–∫–æ–º
	// –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

	return b.HandleMediaUpload(update, mediaService)
}

// HandleTeacherFeedback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø–∏—Å—å —Ñ–∏–¥–±—ç–∫–∞ —É—á–∏—Ç–µ–ª–µ–º
func (b *Bot) HandleTeacherFeedback(update tgbotapi.Update, mediaService interface{}) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —É—á–∏—Ç–µ–ª–µ–º
	// –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

	return b.HandleMediaUpload(update, mediaService)
}

// SendFeedbackNotification –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ñ–∏–¥–±—ç–∫–µ –æ—Ç —É—á–∏—Ç–µ–ª—è
func (b *Bot) SendFeedbackNotification(userTelegramID int64, assignmentTitle, subject, grade, comments string) {
	gradeText := grade
	if grade == "needs_revision" {
		gradeText = "–Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É"
	}

	message := fmt.Sprintf(
		"üìù *–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ!*\n\n"+
			"üìö –ó–∞–¥–∞–Ω–∏–µ: %s\n"+
			"üìñ –ü—Ä–µ–¥–º–µ—Ç: %s\n"+
			"‚≠ê –û—Ü–µ–Ω–∫–∞: %s\n\n",
		assignmentTitle, subject, gradeText,
	)

	if comments != "" {
		message += fmt.Sprintf("üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—á–∏—Ç–µ–ª—è:\n%s\n\n", comments)
	}

	if grade == "needs_revision" {
		message += "üîÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ—Ä–∞–±–æ—Ç–∞–π—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–Ω–æ–≤–æ."
	} else {
		message += "‚úÖ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ."
	}

	b.SendMessage(userTelegramID, message)
	log.Printf("Feedback notification sent to user %d for assignment %s", userTelegramID, assignmentTitle)
}
