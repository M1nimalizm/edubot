package main

import (
	"fmt"
	"log"
	"time"

	"github.com/google/uuid"
	"gorm.io/driver/sqlite"
	"gorm.io/gorm"

	"edubot/internal/models"
)

func main() {
	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	db, err := gorm.Open(sqlite.Open("test.db"), &gorm.Config{})
	if err != nil {
		log.Fatalf("Failed to connect to database: %v", err)
	}

	// –ê–≤—Ç–æ–º–∏–≥—Ä–∞—Ü–∏—è
	err = db.AutoMigrate(
		&models.User{},
		&models.Assignment{},
		&models.AssignmentTarget{},
		&models.Submission{},
		&models.Feedback{},
		&models.ChatThread{},
		&models.Message{},
		&models.Notification{},
		&models.Group{},
		&models.GroupMember{},
		&models.Media{},
		&models.Draft{},
	)
	if err != nil {
		log.Fatalf("Failed to migrate database: %v", err)
	}

	// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	teacherID := uuid.New()
	student1ID := uuid.New()
	student2ID := uuid.New()
	student3ID := uuid.New()

	users := []models.User{
		{
			ID:         teacherID,
			TelegramID: 123456789,
			Username:   "teacher_pugach",
			FirstName:  "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä",
			LastName:   "–ü—É–≥–∞—á–µ–≤",
			Role:       models.RoleTeacher,
			Grade:      0,
			Subjects:   "physics,math",
			CreatedAt:  time.Now(),
			UpdatedAt:  time.Now(),
		},
		{
			ID:         student1ID,
			TelegramID: 987654321,
			Username:   "student_ivan",
			FirstName:  "–ò–≤–∞–Ω",
			LastName:   "–ò–≤–∞–Ω–æ–≤",
			Role:       models.RoleStudent,
			Grade:      11,
			Subjects:   "physics,math",
			CreatedAt:  time.Now(),
			UpdatedAt:  time.Now(),
		},
		{
			ID:         student2ID,
			TelegramID: 111222333,
			Username:   "student_maria",
			FirstName:  "–ú–∞—Ä–∏—è",
			LastName:   "–ü–µ—Ç—Ä–æ–≤–∞",
			Role:       models.RoleStudent,
			Grade:      10,
			Subjects:   "physics",
			CreatedAt:  time.Now(),
			UpdatedAt:  time.Now(),
		},
		{
			ID:         student3ID,
			TelegramID: 444555666,
			Username:   "student_alex",
			FirstName:  "–ê–ª–µ–∫—Å–µ–π",
			LastName:   "–°–∏–¥–æ—Ä–æ–≤",
			Role:       models.RoleStudent,
			Grade:      11,
			Subjects:   "math",
			CreatedAt:  time.Now(),
			UpdatedAt:  time.Now(),
		},
	}

	for _, user := range users {
		if err := db.Create(&user).Error; err != nil {
			log.Printf("Failed to create user %s: %v", user.Username, err)
		}
	}

	// –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É
	groupID := uuid.New()
	group := models.Group{
		ID:        groupID,
		Name:      "11 –∫–ª–∞—Å—Å - –§–∏–∑–∏–∫–∞",
		Subject:   "physics",
		Grade:     11,
		Level:     3,
		TeacherID: teacherID,
		CreatedAt: time.Now(),
		UpdatedAt: time.Now(),
	}
	if err := db.Create(&group).Error; err != nil {
		log.Printf("Failed to create group: %v", err)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø—É
	groupMembers := []models.GroupMember{
		{
			ID:       uuid.New(),
			GroupID:  groupID,
			UserID:   student1ID,
			Role:     "student",
			JoinedAt: time.Now(),
		},
		{
			ID:       uuid.New(),
			GroupID:  groupID,
			UserID:   student2ID,
			Role:     "student",
			JoinedAt: time.Now(),
		},
	}

	for _, member := range groupMembers {
		if err := db.Create(&member).Error; err != nil {
			log.Printf("Failed to create group member: %v", err)
		}
	}

	// –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏—è
	assignments := []models.Assignment{
		{
			ID:          uuid.New(),
			Title:       "–ö–∏–Ω–µ–º–∞—Ç–∏–∫–∞ - –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ",
			Description: "–†–µ—à–∏—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ –ø—Ä—è–º–æ–ª–∏–Ω–µ–π–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ. –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏—Ç–µ —Ñ–æ—Ä–º—É–ª—ã –∏ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è.",
			Subject:     "physics",
			Grade:       11,
			Level:       2,
			TeacherID:   teacherID,
			GroupID:     &groupID,
			DueDate:     time.Now().Add(7 * 24 * time.Hour),
			Status:      "active",
			CreatedBy:   teacherID,
			CreatedAt:   time.Now(),
			UpdatedAt:   time.Now(),
		},
		{
			ID:          uuid.New(),
			Title:       "–î–∏–Ω–∞–º–∏–∫–∞ - –ó–∞–∫–æ–Ω—ã –ù—å—é—Ç–æ–Ω–∞",
			Description: "–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∑–∞–∫–æ–Ω—ã –ù—å—é—Ç–æ–Ω–∞ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á –Ω–∞ –¥–≤–∏–∂–µ–Ω–∏–µ —Ç–µ–ª –ø–æ–¥ –¥–µ–π—Å—Ç–≤–∏–µ–º —Å–∏–ª.",
			Subject:     "physics",
			Grade:       11,
			Level:       3,
			TeacherID:   teacherID,
			GroupID:     &groupID,
			DueDate:     time.Now().Add(14 * 24 * time.Hour),
			Status:      "active",
			CreatedBy:   teacherID,
			CreatedAt:   time.Now(),
			UpdatedAt:   time.Now(),
		},
		{
			ID:          uuid.New(),
			Title:       "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ - –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
			Description: "–†–µ—à–∏—Ç—å —Å–∏—Å—Ç–µ–º—É —É—Ä–∞–≤–Ω–µ–Ω–∏–π –∏ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Ñ—É–Ω–∫—Ü–∏–∏.",
			Subject:     "math",
			Grade:       11,
			Level:       4,
			TeacherID:   teacherID,
			StudentID:   &student3ID,
			DueDate:     time.Now().Add(5 * 24 * time.Hour),
			Status:      "active",
			CreatedBy:   teacherID,
			CreatedAt:   time.Now(),
			UpdatedAt:   time.Now(),
		},
	}

	for _, assignment := range assignments {
		if err := db.Create(&assignment).Error; err != nil {
			log.Printf("Failed to create assignment: %v", err)
		}
	}

	// –°–æ–∑–¥–∞–µ–º AssignmentTarget –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π
	for _, assignment := range assignments[:2] { // –ü–µ—Ä–≤—ã–µ –¥–≤–∞ –∑–∞–¥–∞–Ω–∏—è - –≥—Ä—É–ø–ø–æ–≤—ã–µ
		for _, member := range groupMembers {
			target := models.AssignmentTarget{
				ID:           uuid.New(),
				AssignmentID: assignment.ID,
				StudentID:    member.UserID,
				Status:       models.AssignmentTargetStatusPending,
				CreatedAt:    time.Now(),
				UpdatedAt:    time.Now(),
			}
			if err := db.Create(&target).Error; err != nil {
				log.Printf("Failed to create assignment target: %v", err)
			}
		}
	}

	// –°–æ–∑–¥–∞–µ–º AssignmentTarget –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
	individualTarget := models.AssignmentTarget{
		ID:           uuid.New(),
		AssignmentID: assignments[2].ID,
		StudentID:    student3ID,
		Status:       models.AssignmentTargetStatusPending,
		CreatedAt:    time.Now(),
		UpdatedAt:    time.Now(),
	}
	if err := db.Create(&individualTarget).Error; err != nil {
		log.Printf("Failed to create individual assignment target: %v", err)
	}

	// –°–æ–∑–¥–∞–µ–º —á–∞—Ç –º–µ–∂–¥—É —Å—Ç—É–¥–µ–Ω—Ç–æ–º –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º
	chatThreadID := uuid.New()
	chatThread := models.ChatThread{
		ID:           chatThreadID,
		Type:         models.ChatThreadTypeStudentTeacher,
		StudentID:    &student1ID,
		TeacherID:    teacherID,
		LastMessageAt: &[]time.Time{time.Now()}[0],
		CreatedAt:    time.Now(),
		UpdatedAt:    time.Now(),
	}
	if err := db.Create(&chatThread).Error; err != nil {
		log.Printf("Failed to create chat thread: %v", err)
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ
	messages := []models.Message{
		{
			ID:        uuid.New(),
			ThreadID:  chatThreadID,
			AuthorID:  student1ID,
			Text:      &[]string{"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –£ –º–µ–Ω—è –≤–æ–ø—Ä–æ—Å –ø–æ –∑–∞–¥–∞—á–µ –Ω–∞ –∫–∏–Ω–µ–º–∞—Ç–∏–∫—É."}[0],
			Kind:      models.MessageKindMessage,
			CreatedAt: time.Now(),
		},
		{
			ID:        uuid.New(),
			ThreadID:  chatThreadID,
			AuthorID:  teacherID,
			Text:      &[]string{"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –ò–≤–∞–Ω! –ö–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ –≤–æ–ø—Ä–æ—Å —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫?"}[0],
			Kind:      models.MessageKindMessage,
			CreatedAt: time.Now().Add(5 * time.Minute),
		},
		{
			ID:        uuid.New(),
			ThreadID:  chatThreadID,
			AuthorID:  student1ID,
			Text:      &[]string{"–ù–µ –ø–æ–Ω–∏–º–∞—é, –∫–∞–∫ –Ω–∞–π—Ç–∏ –≤—Ä–µ–º—è –¥–≤–∏–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω—ã —Ç–æ–ª—å–∫–æ —Å–∫–æ—Ä–æ—Å—Ç—å –∏ –ø—É—Ç—å."}[0],
			Kind:      models.MessageKindMessage,
			CreatedAt: time.Now().Add(10 * time.Minute),
		},
	}

	for _, message := range messages {
		if err := db.Create(&message).Error; err != nil {
			log.Printf("Failed to create message: %v", err)
		}
	}

	// –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
	notifications := []models.Notification{
		{
			ID:        uuid.New(),
			UserID:    student1ID,
			Type:      models.NotificationTypeNewAssignment,
			Title:     "–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ",
			Message:   "–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–æ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ: –ö–∏–Ω–µ–º–∞—Ç–∏–∫–∞ - –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ",
			Payload:   fmt.Sprintf(`{"assignment_id":"%s"}`, assignments[0].ID.String()),
			Channel:   models.NotificationChannelBot,
			Status:    models.NotificationStatusPending,
			CreatedAt: time.Now(),
			UpdatedAt: time.Now(),
		},
		{
			ID:        uuid.New(),
			UserID:    student2ID,
			Type:      models.NotificationTypeNewAssignment,
			Title:     "–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ",
			Message:   "–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–æ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ: –ö–∏–Ω–µ–º–∞—Ç–∏–∫–∞ - –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ",
			Payload:   fmt.Sprintf(`{"assignment_id":"%s"}`, assignments[0].ID.String()),
			Channel:   models.NotificationChannelBot,
			Status:    models.NotificationStatusPending,
			CreatedAt: time.Now(),
			UpdatedAt: time.Now(),
		},
		{
			ID:        uuid.New(),
			UserID:    teacherID,
			Type:      models.NotificationTypeNewMessage,
			Title:     "–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
			Message:   "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤ –Ω–∞–ø–∏—Å–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ",
			Payload:   fmt.Sprintf(`{"thread_id":"%s","message_id":"%s"}`, chatThreadID.String(), messages[0].ID.String()),
			Channel:   models.NotificationChannelBot,
			Status:    models.NotificationStatusPending,
			CreatedAt: time.Now(),
			UpdatedAt: time.Now(),
		},
	}

	for _, notification := range notifications {
		if err := db.Create(&notification).Error; err != nil {
			log.Printf("Failed to create notification: %v", err)
		}
	}

	fmt.Println("‚úÖ Seed data created successfully!")
	fmt.Printf("üë®‚Äçüè´ Teacher: %s (ID: %s)\n", users[0].FirstName+" "+users[0].LastName, teacherID.String())
	fmt.Printf("üë®‚Äçüéì Student 1: %s (ID: %s)\n", users[1].FirstName+" "+users[1].LastName, student1ID.String())
	fmt.Printf("üë©‚Äçüéì Student 2: %s (ID: %s)\n", users[2].FirstName+" "+users[2].LastName, student2ID.String())
	fmt.Printf("üë®‚Äçüéì Student 3: %s (ID: %s)\n", users[3].FirstName+" "+users[3].LastName, student3ID.String())
	fmt.Printf("üë• Group: %s (ID: %s)\n", group.Name, groupID.String())
	fmt.Printf("üìù Assignments: %d created\n", len(assignments))
	fmt.Printf("üí¨ Chat messages: %d created\n", len(messages))
	fmt.Printf("üîî Notifications: %d created\n", len(notifications))
}
